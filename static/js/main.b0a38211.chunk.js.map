{"version":3,"sources":["connectors.js","ButtonConnect.js","hooks.js","getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["injected","InjectedConnector","supportedChainIds","ButtonConnect","useWeb3React","connector","account","activate","deactivate","active","error","React","activatingConnector","setActivatingConnector","undefined","suppress","useEffect","ethereum","window","on","handleConnect","console","log","handleChainChanged","chainId","handleAccountsChanged","accounts","length","handleNetworkChanged","networkId","removeListener","useInactiveListener","useState","tried","setTried","isAuthorized","then","catch","useEagerConnect","onConnectWallet","onDisconnectWallet","style","display","flexDirection","alignItems","marginBlock","marginTop","marginBottom","NoEthereumProviderError","UnsupportedChainIdError","getErrorMessage","flex","color","type","className","onClick","getWeb3","Promise","resolve","reject","a","web3","Web3","enable","provider","providers","HttpProvider","App","setWeb3","lotteryContract","setGameContract","tokenContract","setTokenContract","allowance","setAllowance","dealer","setDealer","game","setGame","isReady","useCallback","updateGame","parseInt","methods","gameId","call","getGame","id","bet","state","players","winners","message","checkAllowence","_address","alert","makeApprove","value","amount","utils","toWei","approve","send","from","createGame","e","preventDefault","betValue","target","elements","mintToken","faucet","stopGame","init","eth","Contract","MonToken","LotteryGame","_dealer","isDealer","onSubmit","htmlFor","height","FormGame","includes","map","player","key","Boolean","location","hostname","match","POLLING_INTERVAL","getLibrary","library","Web3Provider","pollingInterval","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b0a38211.chunk.js","sourcesContent":["import { InjectedConnector } from '@web3-react/injected-connector'\n\nconst NETWORKS = [1, 4, 42, 56, 77, 97, 99, 128, 137, 256, 11112, 11110, 1337]\n\n// const POLLING_INTERVAL = 3000\n\nexport const injected = new InjectedConnector({\n\tsupportedChainIds: NETWORKS\n})\n","import * as React  from 'react'\nimport { useWeb3React, UnsupportedChainIdError } from '@web3-react/core'\n\nimport {\n\tNoEthereumProviderError,\n} from '@web3-react/injected-connector'\nimport { injected } from './connectors'\nimport {  useInactiveListener, useEagerConnect } from './hooks'\n\n\nfunction getErrorMessage(error) {\n\tif (error instanceof NoEthereumProviderError) {\n\t\treturn 'No Metamask Extension detected, install Metamask Extension on desktop or visit from a dApp browser on mobile.'\n\t} else if (error instanceof UnsupportedChainIdError) {\n\t\treturn \"You're connected to an unsupported network.\"\n\t} else {\n\t\tconsole.error(error)\n\t\treturn 'An unknown error occurred. Check the console for more details.'\n\t}\n}\n\nconst ButtonConnect = () => {\n\tconst { connector,  account, activate, deactivate, active, error } = useWeb3React()\n\t// handle logic to recognize the connector currently being activated\n\tconst [activatingConnector, setActivatingConnector] = React.useState()\n\tReact.useEffect(() => {\n\t\tif (activatingConnector && activatingConnector === connector) {\n\t\t\tsetActivatingConnector(undefined)\n\t\t}\n\t}, [activatingConnector, connector])\n\t// handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n\tconst triedEager = useEagerConnect()\n\n\t// handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n\tuseInactiveListener(!triedEager || !!activatingConnector)\n\n\tconst onConnectWallet = React.useCallback(() => {\n\t\tsetActivatingConnector(injected)\n\t\tactivate(injected)\n\t}, [activate])\n\n\tconst onDisconnectWallet = React.useCallback(() => {\n\t\tsetActivatingConnector(undefined)\n\t\tdeactivate()\n\t}, [deactivate])\n\n\tif (!active)\n\t\treturn (\n            <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center',marginBlock: 20 }}>\n                <button type=\"submit\" className=\"btn btn-primary\" onClick={onConnectWallet}>\n                    Connect Wallet\n                </button>\n            </div>\n\t\t)\n\tif (error) {\n\t\treturn (\n\t\t\t<div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center',marginBlock: 20 }}>\n\t\t\t\t{!!error && <h4 style={{ marginTop: '1rem', marginBottom: '0' }}>{getErrorMessage(error)}</h4>}\n\t\t\t</div>\n\t\t)\n\t}\n\treturn (\n\t\t<div\n\t\t\tstyle={{\n\t\t\t\tdisplay: 'flex',\n\t\t\t\tflex: 1,\n\t\t\t\tflexDirection: 'column',\n\t\t\t\talignItems: 'center',\n\t\t\t\tmarginBlock: 20\n\t\t\t}}\n\t\t>\n\t\t\t<div style={{ marginBottom: 20 }}>\n\t\t\t\tHi <span style={{ color: 'orange' }}>{account}</span> <br />\n\t\t\t</div>\n\t\t\t<button type=\"submit\" className=\"btn btn-primary\" onClick={onDisconnectWallet}>\n\t\t\t\tDisconnect\n\t\t\t</button>\n\t\t</div>\n\t)\n}\n\nexport default ButtonConnect","import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { injected } from './connectors'\n\nexport function useEagerConnect() {\n    const { activate, active } = useWeb3React()\n\n    const [tried, setTried] = useState(false)\n\n    useEffect(() => {\n        injected.isAuthorized().then((isAuthorized) => {\n            if (isAuthorized) {\n                activate(injected, undefined, true).catch(() => {\n                    setTried(true)\n                })\n            } else {\n                setTried(true)\n            }\n        })\n    }, [activate]) // intentionally only running on mount (make sure it's only mounted once :))\n\n    // if the connection worked, wait until we get confirmation of that to flip the flag\n    useEffect(() => {\n        if (!tried && active) {\n            setTried(true)\n        }\n    }, [tried, active])\n\n    return tried\n}\n\nexport function useInactiveListener(suppress = false) {\n    const { active, error, activate } = useWeb3React()\n\n    useEffect(() => {\n        const { ethereum } = window;\n        if (ethereum && ethereum.on && !active && !error && !suppress) {\n            const handleConnect = () => {\n                console.log(\"Handling 'connect' event\")\n                activate(injected)\n            }\n            const handleChainChanged = (chainId) => {\n                console.log(\"Handling 'chainChanged' event with payload\", chainId)\n                activate(injected)\n            }\n            const handleAccountsChanged = (accounts) => {\n                console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n                if (accounts.length > 0) {\n                    activate(injected)\n                }\n            }\n            const handleNetworkChanged = (networkId) => {\n                console.log(\"Handling 'networkChanged' event with payload\", networkId)\n                activate(injected)\n            }\n\n            ethereum.on('connect', handleConnect)\n            ethereum.on('chainChanged', handleChainChanged)\n            ethereum.on('accountsChanged', handleAccountsChanged)\n            ethereum.on('networkChanged', handleNetworkChanged)\n\n            return () => {\n                if (ethereum.removeListener) {\n                    ethereum.removeListener('connect', handleConnect)\n                    ethereum.removeListener('chainChanged', handleChainChanged)\n                    ethereum.removeListener('accountsChanged', handleAccountsChanged)\n                    ethereum.removeListener('networkChanged', handleNetworkChanged)\n                }\n            }\n        }\n    }, [active, error, suppress, activate])\n}\n","import Web3 from \"web3\";\n\nexport const getWeb3 = () =>\n  new Promise(async (resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    // window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    // });\n  });\n\n","import { useWeb3React } from \"@web3-react/core\";\nimport React, { useCallback, useEffect, useState } from \"react\";\n\nimport ButtonConnect from \"./ButtonConnect\";\n// import LotteryGame from \"./contracts/LotteryGame.json\";\n// import MonToken from \"./contracts/Mon.json\";\nimport LotteryGame from \"./abi/LotteryGame.json\";\nimport MonToken from \"./abi/Mon.json\";\nimport { getWeb3 } from \"./getWeb3\";\n\n\nfunction App() {\n\tconst [web3, setWeb3] = useState(undefined);\n\tconst [lotteryContract, setGameContract] = useState(undefined);\n\tconst [tokenContract, setTokenContract] = useState(undefined);\n\tconst [allowance, setAllowance] = useState(0);\n\tconst [dealer, setDealer] = useState(undefined);\n\tconst [game, setGame] = useState(undefined);\n\n\tconst { account,  } = useWeb3React()\n\n\tconst isReady = useCallback(() => {\n\t\treturn (\n\t\t\ttypeof lotteryContract !== \"undefined\" &&\n\t\t\ttypeof tokenContract !== \"undefined\" &&\n\t\t\ttypeof web3 !== \"undefined\" &&\n\t\t\ttypeof account !== \"undefined\"\n\t\t);\n\t}, [account, lotteryContract, tokenContract, web3]);\n\t\n\n\tconst updateGame = useCallback(async () =>{\n\t\ttry {\n\t\t\tlet gameId = parseInt(await lotteryContract.methods.gameId().call());\n\t\t\tgameId = gameId > 0 ? gameId - 1 : gameId;\n\t\t\tconst game = await lotteryContract.methods.getGame(gameId).call();\n\t\t\tif (typeof game[2] != 'string') {\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\tsetGame({\n\t\t\t\t\tid: game[0],\n\t\t\t\t\tbet: game[1],\n\t\t\t\t\tstate: game[2],\n\t\t\t\t\tplayers: game[3],\n\t\t\t\t\twinners: game[4],\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tconsole.log(err.message);\n\t\t}\n\t}, [lotteryContract])\n\n\tconst checkAllowence = useCallback(async() => {\n\t\ttry {\n\t\t\tconst allowance = await tokenContract.methods.allowance(account, lotteryContract._address).call();\n\t\t\tsetAllowance(parseInt(allowance));\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t\talert(err.message);\n\t\t}\n\t}, [account, tokenContract, lotteryContract]);\n\n\tconst makeApprove = async (value) => {\n\t\ttry {\n\t\t\tconst amount = web3.utils.toWei(value);\n\t\t\tawait tokenContract.methods.approve(lotteryContract._address, amount).send({ from: account });\n\t\t\tsetAllowance(value)\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t\talert(err.message);\n\t\t}\n\t};\n\n\tconst createGame = async (e) => {\n\t\te.preventDefault();\n\t\ttry {\n\t\t\tconst betValue = e.target.elements[0].value;\n\t\t\tconst amount = web3.utils.toWei(betValue);\n\t\t\tawait lotteryContract.methods.createGame(amount).send({ from: account });\n\t\t\tawait updateGame();\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t\talert(err.message);\n\t\t}\n\t};\n\n\tconst mintToken = async (e) => {\n\t\te.preventDefault();\n\t\tif (!tokenContract) return;\n\n\t\t// const address = e.target.elements[0].value.trim();\n\t\ttry {\n\t\t\tconst amount = web3.utils.toWei('10000')\n\t\t\tawait tokenContract.methods.faucet(account, amount).send({from: account})\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t\talert(err.message);\n\t\t}\n\t}\n\n\tconst bet = async (e) => {\n\t\te.preventDefault();\n\t\tif (!game) {\n\t\t\talert('game not created yet!')\n\t\t\treturn;\n\t\t}\n\n\t\tconst betValue = e.target.elements[0].value;\n\t\ttry {\n\t\t\tif (allowance < game.bet) {\n\t\t\t\t\n\t\t\t\tconst approve = await makeApprove(game.bet);\n\t\t\t\tif (!approve) return;\n\t\t\t}\n\n\t\t\tawait lotteryContract.methods\n\t\t\t\t.bet(game.id, betValue, '6')\n\t\t\t\t.send({ from: account });\n\t\t\tawait updateGame();\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t\talert(err.message);\n\t\t}\n\t};\n\n\tasync function stopGame(e) {\n\t\te.preventDefault();\n\n\t\tawait lotteryContract.methods.stopGame(game.id).send({ from: account });\n\t\tawait updateGame();\n\t}\n\n\tconst init = async () => {\n\t\tconst web3 = await getWeb3();\n\t\t// const networkId = await web3.eth.net.getId();\n\t\t// const deployedNetworkLotteryGame = LotteryGame.networks[networkId];\n\t\t// const deployedNetworkLotteryGameERC20Token = MonToken.networks[networkId];\n\t\t\n\t\tconst tokenContract = new web3.eth.Contract(\n\t\t\t// MonToken.abi,\n\t\t\t// deployedNetworkLotteryGameERC20Token && deployedNetworkLotteryGameERC20Token.address\n\t\t\t// '0x7a25b8352D46E39347A082Fd920f0Eb0108ab8dA'\n\t\t\tMonToken,\n\t\t\t'0x902163Ed629ca73194Bfbcf1198ec700d18eF536',\n\t\t);\n\t\t\n\t\tconst lotteryContract = new web3.eth.Contract(\n\t\t\t// LotteryGame.abi,\n\t\t\t// deployedNetworkLotteryGame && deployedNetworkLotteryGame.address\n\t\t\t// '0x7F59F3Ca0782de6Dcd91AafDaF67FE473af5A52d',\n\t\t\tLotteryGame,\n\t\t\t'0x31F2f91E4993E0eC99137DabdD9192bb24C8DCA8'\n\t\t);\n\t\t\n\t\tconst _dealer = await lotteryContract.methods.dealer().call();\n\n\t\tsetWeb3(web3);\n\t\tsetTokenContract(tokenContract);\n\t\tsetGameContract(lotteryContract);\n\t\tsetDealer(_dealer);\n\t};\n\n\tuseEffect(() => {\n\t\tinit();\n\t}, [])\n\n\tuseEffect(() => {\n\t\tconst _isReady = isReady()\n\t\tif (_isReady) {\n\t\t\tupdateGame();\n\t\t\tcheckAllowence();\n\t\t}\n\t}, [account, isReady, checkAllowence, updateGame]);\n\n\tconst isDealer = typeof dealer != \"undefined\" && account == dealer;\n\n\tconst FormFaucet = () => (\n\t\t<form onSubmit={(e) => mintToken(e)}>\n\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t<label htmlFor=\"Get Faucet\">Mint 10000 token from Faucet</label>\n\t\t\t\t\t{/* <input placeholder=\"Fill player address to get token from faucet\" type=\"text\" className=\"form-control\" id=\"address_faucet\" /> */}\n\t\t\t\t</div>\n\t\t\t\t<button  type=\"submit\" className=\"btn btn-primary\">\n\t\t\t\t\tMint \n\t\t\t\t</button>\n\t\t\t</form>\n\t)\n\t\n\t// if (lotteryContract)\n\t// lotteryContract.methods.bets(2,'0xCDD51523ed1511209AE2e5bB65f21D93c49D4201').call().then(console.log)\n\n\tconst DealerComponent = () => {\n\t\tlet FormGame = '';\n\t\tif (game){\n\t\t\tif ([\"1\", \"2\"].includes(game.state)) {\n\t\t\t\tFormGame = () => (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<h2>Bet GameID: {parseInt(game.id) + 1}</h2>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<h2>Players</h2>\n\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t{game.players.map((player) => (\n\t\t\t\t\t\t\t\t\t<li key={player}>{player}</li>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t<div className=\"col-sm-12\">\n\t\t\t\t\t\t\t\t<h2>Close Game</h2>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={(e) => stopGame(e)}\n\t\t\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-success\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tClose Game\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (game.state == \"3\") {\n\t\t\t\tFormGame = () => (\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t<h2>Bet: {parseInt(game.id) + 1}</h2>\n\t\t\t\t\t\t\t\t<h2>Winners</h2>\n\t\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t\t{game.winners && game.winners.length > 0 ? (game.winners.map((player) => (\n\t\t\t\t\t\t\t\t\t\t<li key={player}>{player}</li>\n\t\t\t\t\t\t\t\t\t))) : account}\n\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t<h2>Create Game</h2>\n\t\t\t\t\t\t\t\t<form onSubmit={(e) => createGame(e)}>\n\t\t\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"bet\">Bet Value</label>\n\t\t\t\t\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" id=\"bet\" />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<button type=\"submit\" className=\"btn btn-primary\">\n\t\t\t\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tFormGame = () =>  (\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div className=\"col-sm-12\">\n\t\t\t\t\t\t<h2>Create Game</h2>\n\t\t\t\t\t\t<form onSubmit={(e) => createGame(e)}>\n\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t<label htmlFor=\"bet\">Bet Value</label>\n\t\t\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" id=\"bet\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<button type=\"submit\" className=\"btn btn-primary\">\n\t\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<FormGame />\n\t\t\t</>\n\t\t)\n\t};\n\n\tconst PlayerComponent = () => (\n\t\t<div className=\"row\">\n\t\t\t<div className=\"col-sm-12\">\n\t\t\t\t<h2>Bet</h2>\n\t\t\t\t{allowance < game.bet ? (\n\t\t\t\t\t<button type=\"submit\" onClick={(e) => makeApprove(game.bet)} className=\"btn btn-primary\">\n\t\t\t\t\tApprove\n\t\t\t\t</button>\n\t\t\t\t) : (\n\t\t\t\t\t<form onSubmit={(e) => bet(e)}>\n\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t<label htmlFor=\"bet\">Bet</label>\n\t\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" id=\"bet\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<button type=\"submit\" className=\"btn btn-primary\">\n\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</form>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t);\n\t\n\treturn (\n\t\t\n\t\t\t<div className=\"container\">\n\t\t\t\t<ButtonConnect />\n\t\t\t\t<h1 className=\"text-center\">Lottery Game</h1>\n\t\t\t\t<FormFaucet />\n\t\t\t\t<div style={{height: 50}} />\n\t\t\t\t{game ? isDealer ? \n\t\t\t\t\t<DealerComponent />\n\t\t\t\t: \n\t\t\t\t\t<PlayerComponent />\n\t\t\t\t: null\n\t\t\t\t}\n\t\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Web3ReactProvider } from '@web3-react/core'\nimport { Web3Provider } from '@ethersproject/providers'\nimport './index.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst POLLING_INTERVAL = 3000\n\nfunction getLibrary(provider) {\n\tconst library = new Web3Provider(provider)\n\tlibrary.pollingInterval = POLLING_INTERVAL\n\treturn library\n}\n\nconst Root = () => (\n    <Web3ReactProvider getLibrary={getLibrary}>\n        <App />\n    </Web3ReactProvider>\n)\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}